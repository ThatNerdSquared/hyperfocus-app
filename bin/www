#!/usr/bin/env node

/**
 * Module dependencies.
 */

// var app = require('../app');
const express = require("express")
const path = require('path');
const app = express()
var debug = require('debug')('backend:server');
var http = require('http');
let models = require("../models");
const cors = require("cors")
app.use(cors())

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);
app.listen(5000, async function ticktock() {
	console.log("meep")
	const data = await models.timerStatus.findAll()
	const id = data[0].dataValues.id
	// if (data[0].dataValues.isIntervalSet === true) {
	// 	return
	// }
	// else {
		// const intervalSet = await models.timerStatus.update({
		// 	isIntervalSet: true
		// }, {
		// 	where: {
		// 		id: id
		// 	}
		// })
		const newData = await models.timerStatus.findAll()
		io.emit("connectionData", { timerStatus: newData })
		const timerGoTickTock = setInterval(async () => {
			const check = await models.timerStatus.findAll({
				where: {
					isRunning: false
				}
			})
			if (check == "") {
				const rawData = await models.timerStatus.findAll()
				const data = rawData[0].dataValues
				let min = data.minutes
				let sec = data.seconds
				let id = data.id
				if (min === 0 && sec === 0) {
					const newData = await models.timerStatus.update({
						minutes: 0,
						seconds: 0,
						isRunning: false,
					}, {
						where: {
							id: id
						}
					})
					const newStatus = await models.timerStatus.findAll()
					io.emit("timerGoTickTock", { timerStatus: newStatus, pomDone: true })
				}
				else {
					let finalMin
					let finalSec
					if (sec-1 < 0) {
						finalSec = 59
						finalMin = min - 1
					}
					else {
						finalSec = sec - 1
						finalMin = min
					}
					const newData = await models.timerStatus.update({
						minutes: finalMin,
						seconds: finalSec
					}, {
						where: {
							id: id
						}
					})
					const newStatus = await models.timerStatus.findAll()
					io.emit("timerGoTickTock", { timerStatus: newStatus })
				}
			}
		}, 1000);
	// }
});
app.use(express.static(path.join('client/build')));
app.get('/', (req, res) => {
	res.sendFile(path.join('client/build', 'index.html'))
})

// app.get('*', (req, res) => {
// 	res.sendFile(path.join(__dirname+'/client/build/index.html'));
//   });

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require("socket.io")(server, {
	cors: {
		origin: "*",
		methods: ["GET", "POST"]
	}
});
io.on("connection", socket => {
	// MAY BE USEFUL FOR ROOM FEATURE LATER ON

	// socket.on("join", async () => {
	// 	socket.join(room);
	// 	io.emit("roomJoined", room);
	// });
	socket.on("join", async username => {
		let timerStatus = await models.timerStatus.findAll()
		if (timerStatus == "") {
			await models.timerStatus.create({
				id: 42,
				minutes: 420,
				seconds: 69,
				pom: false,
				isRunning: false,
				isIntervalSet: false,
				timerOptions: [15, 25, 50, 90],
				participants: []
			})
		}
		else {
			const checkPeople = await models.user.findAll({
				where: {
					isOnline: true
				}
			})
			if (checkPeople == "") {
				await models.timerStatus.update({
					isRunning: false,
					isIntervalSet: false
				}, {
					where: {
						isRunning: true 
					}
				})
			}
		}
		let users = await models.user.findAll()
		let checkCurrentUser = await models.user.findAll({
			where: {
				name: username
			}
		})
		if (checkCurrentUser == "") {
			await models.user.create({
				name: username,
				totalPomsToday: 0,
				isOnline: true
			})
		}
		else {
			await models.user.update({
				isOnline: true
			}, {
				where: {
					name: username
				}
			})
		}
		users = await models.user.findAll()
		timerStatus = await models.timerStatus.findAll()
		let currentUser = await models.user.findAll({
			where: {
				name: username
			}
		})
		io.emit("connectionData", { timerStatus: timerStatus, isLoggedIn: true, users: users })
		io.to(socket.id).emit("private", { currentUser: currentUser });
	})
	socket.on("startTimer", async data => {
		const { minutes, id, pom } = data
		let newPom
		pom === true ? newPom = false : newPom = true
		const newData = await models.timerStatus.update({
			minutes: minutes,
			seconds: 0,
			pom: newPom,
			isRunning: true
		}, {
			where: {
				id: id
			}
		})
		const newStatus = await models.timerStatus.findAll()
		io.emit("timerStarted", { timerStatus: newStatus })

	})
	socket.on("toggleTimer", async signal => {
		const { isRunning, id } = signal
		const newData = await models.timerStatus.update({
			isRunning: isRunning
		}, {
			where: {
				id: id
			}
		})
		const newStatus = await models.timerStatus.findAll()
		io.emit("timerToggled", { timerStatus: newStatus })
	})
	socket.on("addOption", async data => {
		const { id, option } = data
		let oldData = await models.timerStatus.findAll()
		let oldArray = oldData[0].dataValues.timerOptions
		let newArray = []
		oldArray.forEach(item => newArray.push(item))
		newArray.push(option)
		const newData = await models.timerStatus.update({
			timerOptions: newArray
		}, {
			where: {
				id: id
			}
		})
		const newStatus = await models.timerStatus.findAll()
		io.emit("optionAdded", { timerStatus: newStatus })
	})
	socket.on("deleteOption", async data => {
		const { id, option } = data
		console.log(option)
		let oldData = await models.timerStatus.findAll()
		let oldArray = oldData[0].dataValues.timerOptions
		let newArray = []
		oldArray.forEach(item => {
			if (item != option) {
				newArray.push(item)
			}
		})
		console.log(newArray)
		const newData = await models.timerStatus.update({
			timerOptions: newArray
		}, {
			where: {
				id: id
			}
		})
		const newStatus = await models.timerStatus.findAll()
		io.emit("optionDeleted", { timerStatus: newStatus })
	})
	socket.on("logMeOut", async user => {
		const { id, name, totalPomsToday, isOnline } = user
		const userID = user[0].id
		const logOutUser = await models.user.update({
			isOnline: false
		}, {
			where: {
				id: userID
			}
		})
		const newUsers = await models.user.findAll()
		io.emit("userLoggedOut", { users: newUsers })
	})
})


/**
 * Listen on provided port, on all network interfaces.
 */

return models.sequelize.sync().then(result => {
	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
