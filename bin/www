#!/usr/bin/env node

// Require dependencies
const express = require("express")
const path = require('path');
const app = express()
var debug = require('debug')('backend:server');
var http = require('http');
let models = require("../models");
const cors = require("cors")
app.use(cors())

// Require utils
let socketJoin = require("../serverUtils/socketJoin.ts")
let newRoom = require("../serverUtils/newRoom.ts")
let startTimer = require("../serverUtils/startTimer.ts")
let toggleTimer = require("../serverUtils/toggleTimer.ts")
let addOption = require("../serverUtils/addOption.ts")
let deleteOption = require("../serverUtils/deleteOption.ts")
let logMeOut = require("../serverUtils/logMeOut.ts")

// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);
app.listen(5000, async function ticktock() {

	let strayStatuses = await models.timerStatus.findAll({
		where: {
			roomCode: null
		}
	})
	strayStatuses.forEach(async status => {
		await status.destroy()
	});

	let timerStatus = await models.timerStatus.findAll()
	if (timerStatus == "") {
		await models.timerStatus.create({
			id: 42,
			roomCode: "ultraYeet",
			minutes: 0,
			seconds: 0,
			pom: false,
			isRunning: false,
			isIntervalSet: false,
			timerOptions: [15, 25, 50, 90],
			participants: []
		})
	}

	let strayClients = await models.client.findAll()
	strayClients.forEach(async client => {
		await client.destroy()
	});

	const data = await models.timerStatus.findAll()
	const id = data[0].dataValues.id
		const newData = await models.timerStatus.findAll()
		io.emit("connectionData", { timerStatus: newData })
		const timerGoTickTock = setInterval(async () => {
			const check = await models.timerStatus.findAll({
				where: {
					isRunning: false
				}
			})
			if (check == "") {
				const rawData = await models.timerStatus.findAll()
				const data = rawData[0].dataValues
				let min = data.minutes
				let sec = data.seconds
				let id = data.id
				if (min === 0 && sec === 0) {
					const newData = await models.timerStatus.update({
						minutes: 0,
						seconds: 0,
						isRunning: false,
					}, {
						where: {
							id: id
						}
					})
					const newStatus = await models.timerStatus.findAll()
					io.emit("timerGoTickTock", { timerStatus: newStatus, pomDone: true })
				}
				else {
					let finalMin
					let finalSec
					if (sec-1 < 0) {
						finalSec = 59
						finalMin = min - 1
					}
					else {
						finalSec = sec - 1
						finalMin = min
					}
					const newData = await models.timerStatus.update({
						minutes: finalMin,
						seconds: finalSec
					}, {
						where: {
							id: id
						}
					})
					const newStatus = await models.timerStatus.findAll()
					io.emit("timerGoTickTock", { timerStatus: newStatus })
				}
			}
		}, 1000);
});
app.use(express.static(path.join('client/build')));
app.get('/', (req, res) => {
	res.sendFile(path.join('client/build', 'index.html'))
})

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require("socket.io")(server, {
	cors: {
		origin: "*",
		methods: ["GET", "POST"]
	}
});
io.on("connection", socket => {
	// MAY BE USEFUL FOR ROOM FEATURE LATER ON

	// socket.on("join", async () => {
	// 	socket.join(room);
	// 	io.emit("roomJoined", room);
	// });
	socket.on("join", async data => {
		socketJoin(io, socket, models, data)
	})
	socket.on("newRoom", async code => {
		newRoom(io, socket, models, code)
	})
	socket.on("startTimer", async data => {
		startTimer(io, models, data)
	})
	socket.on("toggleTimer", async signal => {
		toggleTimer(io, models, signal)
	})
	socket.on("addOption", async data => {
		addOption(io, models, data)
	})
	socket.on("deleteOption", async data => {
		deleteOption(io, models, data)
	})
	socket.on("logMeOut", async data => {
		logMeOut(io, socket, models, data)
	})
})


/**
 * Listen on provided port, on all network interfaces.
 */

return models.sequelize.sync().then(result => {
	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
